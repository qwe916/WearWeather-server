plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
}

bootJar { enabled = false }

jar { enabled = true }

allprojects{
    repositories {
        mavenCentral()
    }
}

// 하위 모든 프로젝트 공통 세팅
subprojects {
    group = 'com.wearweather'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'jacoco'

    bootJar { enabled = false }

    jar { enabled = true }

    // 하위 모듈에서 공통으로 사용하는 세팅 추가
    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        implementation 'org.springframework.boot:spring-boot-starter'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    }

    jacoco {
        toolVersion = "0.8.10"
    }

    jacocoTestReport {
        reports {
            html.required.set(true)
            xml.required.set(true)
            csv.required.set(false)

            html.destination file("${buildDir}/jacoco/index.html")
            xml.destination file("${buildDir}/jacoco/index.xml")
        }
        def Qdomains = []

        // Q domains 제외
        for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
            Qdomains.add(qPattern + '*')
        }

        afterEvaluate {
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, excludes: [
                                "**/*Application*",
                                "**/*Config*",
                                "**/*Dto*",
                                "**/*Request*",
                                "**/*Response*",
                                "**/*Interceptor*",
                                "**/*Exception*"
                        ] + Qdomains)
                    })
            )
        }
        finalizedBy jacocoTestCoverageVerification
    }

    jacocoTestCoverageVerification{
        violationRules {
            rule {
                element = 'CLASS'

                limit {
                    minimum = 0.0
                }
            }
        }
    }
    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
}